#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba16f, set = 0, binding = 0) uniform image2D image;

layout (push_constant) uniform constants
{
    int particle_count;
    float smoothing_radius;
    float target_density;
    float pressure_multiplier;
} pc;

layout(std140, set = 0, binding = 1) buffer ParticleBuffer
{
    vec4 positions[];
};

const float particle_mass = 1.0;

const float pi = 3.14159265359;
const float FLOAT_MAX = 1.0 / 0.0;

ivec2 image_size;

float smoothing_kernel_spiky(vec2 position, float radius)
{
    float dst_squared = position.x * position.x + position.y * position.y;
    float dst = sqrt(dst_squared);

    if (radius * radius > dst_squared)
    {
        float volume = (pi * pow(radius, 4)) / 6.0f;

        return (radius - dst) * (radius - dst) / volume;
    }
    return 0;
}
float smoothing_kernel_spiky_derivative(vec2 position, float radius)
{
    float dst_squared = position.x * position.x + position.y * position.y;
    float dst = sqrt(dst_squared);

    if (radius * radius > dst_squared)
    {
        float scale = 12.0f / (pow(radius, 4) * pi);
        return (dst - radius) * scale;
    }
    return 0;
}

float poly6_scaling_factor = 4.0 / (pi * pow(pc.smoothing_radius, 8));

float smoothing_kernel_poly6(vec2 position, float radius)
{
    float dst_squared = position.x * position.x + position.y * position.y;

    if (radius * radius > dst_squared)
    {
        float value = radius * radius - dst_squared;
        // float volume = pi * pow(radius, 8) / 4;

        return value * value * value * poly6_scaling_factor;
    }
    return 0.0;
}

float smoothing_kernel_poly6_derivative(vec2 position, float radius)
{
    float dst_squared = position.x * position.x + position.y * position.y;

    if (radius * radius > dst_squared)
    {
        float f = radius * radius - dst_squared;
        float scale = -24.0 / (pi * pow(radius, 8));
        return scale * sqrt(dst_squared) * f * f;
    }
    return 0;
}

float calculate_density(vec2 point)
{
    float density = 0.0;

    for (int i = 0; i < pc.particle_count; i++)
    {
        density += smoothing_kernel_spiky(vec2(positions[i].x, positions[i].y) - point, pc.smoothing_radius);
    }
    return density;
}


float convert_density_to_pressure(float density)
{
    float density_delta = density - pc.target_density;
    float pressure = density_delta * pc.pressure_multiplier;
    return pressure;
}
vec2 calculate_pressure_force(vec2 point)
{
    vec2 pressure_force = vec2(0);

    for (int i = 0; i < pc.particle_count; ++i)
    {
        vec2 particle_position = vec2(positions[i].x, positions[i].y);
        float particle_property = cos(particle_position.y * 5.5 + sin(particle_position.x * 13));
        vec2 dir = normalize(particle_position - point);
        float slope = smoothing_kernel_spiky_derivative(particle_position - point, pc.smoothing_radius);
        float density = positions[i].z;
    
        pressure_force += convert_density_to_pressure(density) * dir * slope / density;
    }

    return pressure_force;
}

const vec3 negative_density_col = vec3(0.2, 0.2, 0.8);
const vec3 positive_density_col = vec3(0.8, 0.2, 0.2);
const vec3 normal_density_col = vec3(0.8, 0.8, 0.8);
const float density_normal_deviation = 50.0;

void main()
{
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    image_size = imageSize(image);

    vec2 position = vec2(float(texel_coord.x) / float(image_size.x), float(texel_coord.y) / float(image_size.y));

    if (texel_coord.x < image_size.x && texel_coord.y < image_size.y)
    {
        // float property = cos(position.y * 5.5 + sin(position.x * 13));
        // imageStore(image, texel_coord, property * vec4(1.0)); 

        float pressure = convert_density_to_pressure(calculate_density(position));

        // vec2 pressure_force = calculate_pressure_force(position);
        // imageStore(image, texel_coord, vec4(normalize(property_gradient), 0, 1.0));
    
        float density_delta = pressure - pc.target_density;

        vec4 col;

        if (density_delta < 0)
        {
            col = vec4(mix(normal_density_col, negative_density_col, -density_delta / density_normal_deviation), 1.0);
        }
        else
        {
            col = vec4(mix(normal_density_col, positive_density_col, density_delta / density_normal_deviation), 1.0);
        }

        imageStore(image, texel_coord, col);
    }
}
